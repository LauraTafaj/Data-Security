# Data-Security
import java.nio.charset.StandardCharsets;

public class RotXAlgorithm {

    private int key;

    public RotXAlgorithm(int key) {
        this.key = key;
    }

    public interface Cryptor {
        String crypt(String message);
    }

    public Cryptor createEncryptor() {
        return new Cryptor() {
            @Override
            public String crypt(String message) {
                byte[] bytes = message.getBytes(StandardCharsets.UTF_8);
                byte[] result = new byte[bytes.length];
                for (int i = 0; i < bytes.length; i++) {
                    result[i] = (byte) ((bytes[i] + key) % 256);
                }
                return new String(result, StandardCharsets.UTF_8);
            }
        };
    }

    public Cryptor createDecryptor() {
        return new Cryptor() {
            @Override
            public String crypt(String message) {
                byte[] bytes = message.getBytes(StandardCharsets.UTF_8);
                byte[] result = new byte[bytes.length];
                for (int i = 0; i < bytes.length; i++) {
                    result[i] = (byte) ((bytes[i] - key + 256) % 256);
                }
                return new String(result, StandardCharsets.UTF_8);
            }
        };
    }

    public static void main(String[] args) {
        RotXAlgorithm algorithm = new RotXAlgorithm(4);
        Cryptor encryptor = algorithm.createEncryptor();
        Cryptor decryptor = algorithm.createDecryptor();

        String message = "Strive not to be a success, but rather to be of value!";
        String encrypted_message = encryptor.crypt(message);
        String decrypted_message = decryptor.crypt(encrypted_message);

        System.out.println("Original message: " + message);
        System.out.println("Encrypted message: " + encrypted_message);
        System.out.println("Decrypted message: " + decrypted_message);
    }
}
